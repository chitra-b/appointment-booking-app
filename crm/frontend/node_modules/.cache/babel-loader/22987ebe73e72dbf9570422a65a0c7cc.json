{"ast":null,"code":"import api from \"../../apiurl\";\nimport { tokenConfig } from \"../../actions/accounts/usermanagement/auth\";\nimport { USER_TIMESLOT_LOADED, USER_TIMESLOT_LOAD_ERROR, USER_TIMESLOT_LOADING, SET_SELECTED_DATE, SET_TIMEZONE, SET_USER, SET_SLOT_DURATION, SET_SELECTED_TIME } from \"../../actions/types\";\nexport const getUserAvailableSlots = (username, slot_duration, timezone, month = '') => (dispatch, getState) => {\n  if (!month) {\n    var d = new Date();\n    month = d.getFullYear() + '-' + (parseInt(d.getMonth()) + 1);\n  }\n\n  dispatch({\n    type: USER_TIMESLOT_LOADING\n  });\n  api.get(\"/appointment_booking/\" + username + \"/?slot_duration=\" + slot_duration + \"&month=\" + month + \"&timezone=\" + timezone, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_TIMESLOT_LOADED,\n      payload: res.data.days\n    });\n  }).catch(err => {\n    let err_msg = \"\";\n\n    if (\"detail\" in err.response.data) {\n      err_msg = err.response.data.detail;\n    } else {\n      for (var key in err.response.data) {\n        err_msg += err.response.data[key];\n      }\n    }\n\n    dispatch({\n      type: USER_TIMESLOT_LOAD_ERROR,\n      payload: err_msg\n    });\n  });\n};\nexport const setSelectedDate = date => {\n  return {\n    type: SET_SELECTED_DATE,\n    payload: date\n  };\n};\nexport const setTimeZone = tz => {\n  return {\n    type: SET_TIMEZONE,\n    payload: tz\n  };\n};\nexport const setUser = user => {\n  return {\n    type: SET_USER,\n    payload: user\n  };\n};\nexport const setSlotDuration = slotduration => {\n  return {\n    type: SET_SLOT_DURATION,\n    payload: slotduration\n  };\n};\nexport const setSelectedTime = time => {\n  return {\n    type: SET_SELECTED_TIME,\n    payload: time\n  };\n};","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/actions/appointment/getuserslot.js"],"names":["api","tokenConfig","USER_TIMESLOT_LOADED","USER_TIMESLOT_LOAD_ERROR","USER_TIMESLOT_LOADING","SET_SELECTED_DATE","SET_TIMEZONE","SET_USER","SET_SLOT_DURATION","SET_SELECTED_TIME","getUserAvailableSlots","username","slot_duration","timezone","month","dispatch","getState","d","Date","getFullYear","parseInt","getMonth","type","get","then","res","payload","data","days","catch","err","err_msg","response","detail","key","setSelectedDate","date","setTimeZone","tz","setUser","user","setSlotDuration","slotduration","setSelectedTime","time"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,qBAHF,EAIEC,iBAJF,EAKEC,YALF,EAMEC,QANF,EAOEC,iBAPF,EAQEC,iBARF,QASO,qBATP;AAWA,OAAO,MAAMC,qBAAqB,GAAI,CAACC,QAAD,EAAWC,aAAX,EAA0BC,QAA1B,EAAoCC,KAAK,GAAC,EAA1C,KAAiD,CACrFC,QADqF,EAErFC,QAFqF,KAGlF;AACH,MAAI,CAAEF,KAAN,EAAY;AACV,QAAIG,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACAJ,IAAAA,KAAK,GAAGG,CAAC,CAACE,WAAF,KAAkB,GAAlB,IAAyBC,QAAQ,CAACH,CAAC,CAACI,QAAF,EAAD,CAAR,GAAuB,CAAhD,CAAR;AACD;;AACDN,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAElB;AAAR,GAAD,CAAR;AACCJ,EAAAA,GAAG,CACDuB,GADF,CAEG,0BACEZ,QADF,GAEE,kBAFF,GAEqBC,aAFrB,GAEmC,SAFnC,GAE6CE,KAF7C,GAEmD,YAFnD,GAEgED,QAJnE,EAKGZ,WAAW,CAACe,QAAD,CALd,EAOEQ,IAPF,CAOOC,GAAG,IAAI;AACXV,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEpB,oBADC;AAEPwB,MAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC;AAFX,KAAD,CAAR;AAID,GAZF,EAaEC,KAbF,CAaQC,GAAG,IAAI;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI,YAAYD,GAAG,CAACE,QAAJ,CAAaL,IAA7B,EAAmC;AACjCI,MAAAA,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAaL,IAAb,CAAkBM,MAA5B;AACD,KAFD,MAEO;AACL,WAAK,IAAIC,GAAT,IAAgBJ,GAAG,CAACE,QAAJ,CAAaL,IAA7B,EAAmC;AACjCI,QAAAA,OAAO,IAAID,GAAG,CAACE,QAAJ,CAAaL,IAAb,CAAkBO,GAAlB,CAAX;AACD;AACF;;AACDnB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEnB,wBADC;AAEPuB,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID,GA1BF;AA2BF,CApCM;AAsCP,OAAO,MAAMI,eAAe,GAAKC,IAAD,IAAU;AACxC,SAAM;AACJd,IAAAA,IAAI,EAAEjB,iBADF;AAEJqB,IAAAA,OAAO,EAACU;AAFJ,GAAN;AAID,CALM;AAMP,OAAO,MAAMC,WAAW,GAAKC,EAAD,IAAQ;AAClC,SAAM;AACJhB,IAAAA,IAAI,EAAEhB,YADF;AAEJoB,IAAAA,OAAO,EAACY;AAFJ,GAAN;AAID,CALM;AAMP,OAAO,MAAMC,OAAO,GAAKC,IAAD,IAAU;AAChC,SAAM;AACJlB,IAAAA,IAAI,EAAEf,QADF;AAEJmB,IAAAA,OAAO,EAACc;AAFJ,GAAN;AAID,CALM;AAMP,OAAO,MAAMC,eAAe,GAAKC,YAAD,IAAkB;AAChD,SAAM;AACJpB,IAAAA,IAAI,EAAEd,iBADF;AAEJkB,IAAAA,OAAO,EAACgB;AAFJ,GAAN;AAID,CALM;AAMP,OAAO,MAAMC,eAAe,GAAKC,IAAD,IAAU;AACxC,SAAM;AACJtB,IAAAA,IAAI,EAAEb,iBADF;AAEJiB,IAAAA,OAAO,EAACkB;AAFJ,GAAN;AAID,CALM","sourcesContent":["import api from \"../../apiurl\";\nimport { tokenConfig } from \"../../actions/accounts/usermanagement/auth\";\nimport {\n  USER_TIMESLOT_LOADED,\n  USER_TIMESLOT_LOAD_ERROR,\n  USER_TIMESLOT_LOADING,\n  SET_SELECTED_DATE,\n  SET_TIMEZONE,\n  SET_USER,\n  SET_SLOT_DURATION,\n  SET_SELECTED_TIME\n} from \"../../actions/types\";\n\nexport const getUserAvailableSlots =  (username, slot_duration, timezone, month='') => (\n  dispatch,\n  getState\n) => {\n  if (! month){\n    var d = new Date();\n    month = d.getFullYear() + '-' + (parseInt(d.getMonth())+1);\n  }\n  dispatch({ type: USER_TIMESLOT_LOADING });\n   api\n    .get(\n      \"/appointment_booking/\" +\n        username +\n        \"/?slot_duration=\"+slot_duration+\"&month=\"+month+\"&timezone=\"+timezone,\n      tokenConfig(getState)\n    )\n    .then(res => {\n      dispatch({\n        type: USER_TIMESLOT_LOADED,\n        payload: res.data.days\n      });\n    })\n    .catch(err => {\n      let err_msg = \"\";\n      if (\"detail\" in err.response.data) {\n        err_msg = err.response.data.detail;\n      } else {\n        for (var key in err.response.data) {\n          err_msg += err.response.data[key];\n        }\n      }\n      dispatch({\n        type: USER_TIMESLOT_LOAD_ERROR,\n        payload: err_msg\n      });\n    });\n};\n\nexport const setSelectedDate =  (date) => {\n  return{\n    type: SET_SELECTED_DATE,\n    payload:date\n  }\n}\nexport const setTimeZone =  (tz) => {\n  return{\n    type: SET_TIMEZONE,\n    payload:tz\n  }\n}\nexport const setUser =  (user) => {\n  return{\n    type: SET_USER,\n    payload:user\n  }\n}\nexport const setSlotDuration =  (slotduration) => {\n  return{\n    type: SET_SLOT_DURATION,\n    payload:slotduration\n  }\n}\nexport const setSelectedTime =  (time) => {\n  return{\n    type: SET_SELECTED_TIME,\n    payload:time\n  }\n}"]},"metadata":{},"sourceType":"module"}