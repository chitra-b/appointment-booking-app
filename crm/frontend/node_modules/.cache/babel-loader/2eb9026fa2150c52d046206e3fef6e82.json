{"ast":null,"code":"import api from \"../../../apiurl\";\nimport { tokenConfig } from \"./../usermanagement/auth\";\nimport { USERDETAILS_LOADING, USERDETAILS_LOADED, USERDETAILS_ERROR, USERLIST_ERROR, USERLIST_LOADED, USERLIST_LOADING, USER_LOADED } from \"../../types\"; // get user details\n\nexport const fetchUser = userid => (dispatch, getState) => {\n  dispatch({\n    type: USERDETAILS_LOADING\n  });\n  api.get(\"/api/v1/users/\" + userid.toString() + \"/\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USERDETAILS_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    let err_msg = \"\";\n\n    if (\"detail\" in err.response.data) {\n      err_msg = err.response.data.detail;\n    } else {\n      for (var key in err.response.data) {\n        err_msg += err.response.data[key];\n      }\n    }\n\n    dispatch({\n      type: USERDETAILS_ERROR,\n      payload: err_msg\n    });\n  });\n}; // fetchallusers\n\nexport const getUsers = (pagenumber = \"\") => (dispatch, getState) => {\n  let pageUrl = pagenumber ? \"/api/v1/users/?page=\" + pagenumber.toString() : \"/api/v1/users/\";\n  dispatch({\n    type: USERLIST_LOADING\n  });\n  api.get(pageUrl, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USERLIST_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    let err_msg = \"\";\n\n    if (\"detail\" in err.response.data) {\n      err_msg = err.response.data.detail;\n    } else {\n      for (var key in err.response.data) {\n        err_msg += err.response.data[key];\n      }\n    }\n\n    dispatch({\n      type: USERLIST_ERROR,\n      payload: err_msg\n    });\n  });\n};","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/actions/accounts/usermanagement/fetchuser.js"],"names":["api","tokenConfig","USERDETAILS_LOADING","USERDETAILS_LOADED","USERDETAILS_ERROR","USERLIST_ERROR","USERLIST_LOADED","USERLIST_LOADING","USER_LOADED","fetchUser","userid","dispatch","getState","type","get","toString","then","res","payload","data","catch","err","err_msg","response","detail","key","getUsers","pagenumber","pageUrl"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SACEC,mBADF,EAEEC,kBAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,eALF,EAMEC,gBANF,EAOEC,WAPF,QAQO,aARP,C,CAWA;;AACA,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACzDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACAF,EAAAA,GAAG,CACAc,GADH,CACO,mBAAmBJ,MAAM,CAACK,QAAP,EAAnB,GAAuC,GAD9C,EACmDd,WAAW,CAACW,QAAD,CAD9D,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEV,kBADC;AAEPe,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI,YAAYD,GAAG,CAACE,QAAJ,CAAaJ,IAA7B,EAAmC;AACjCG,MAAAA,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,MAA5B;AACD,KAFD,MAEO;AACL,WAAK,IAAIC,GAAT,IAAgBJ,GAAG,CAACE,QAAJ,CAAaJ,IAA7B,EAAmC;AACjCG,QAAAA,OAAO,IAAID,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBM,GAAlB,CAAX;AACD;AACF;;AACDd,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,iBADC;AAEPc,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID,GArBH;AAsBD,CAxBM,C,CA0BP;;AACA,OAAO,MAAMI,QAAQ,GAAG,CAACC,UAAU,GAAG,EAAd,KAAqB,CAAChB,QAAD,EAAWC,QAAX,KAAwB;AACnE,MAAIgB,OAAO,GAAGD,UAAU,GACpB,yBAAyBA,UAAU,CAACZ,QAAX,EADL,GAEpB,gBAFJ;AAGAJ,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACAP,EAAAA,GAAG,CACAc,GADH,CACOc,OADP,EACgB3B,WAAW,CAACW,QAAD,CAD3B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,eADC;AAEPY,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI,YAAYD,GAAG,CAACE,QAAJ,CAAaJ,IAA7B,EAAmC;AACjCG,MAAAA,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,MAA5B;AACD,KAFD,MAEO;AACL,WAAK,IAAIC,GAAT,IAAgBJ,GAAG,CAACE,QAAJ,CAAaJ,IAA7B,EAAmC;AACjCG,QAAAA,OAAO,IAAID,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBM,GAAlB,CAAX;AACD;AACF;;AACDd,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,cADC;AAEPa,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID,GArBH;AAsBD,CA3BM","sourcesContent":["import api from \"../../../apiurl\";\nimport { tokenConfig } from \"./../usermanagement/auth\";\nimport {\n  USERDETAILS_LOADING,\n  USERDETAILS_LOADED,\n  USERDETAILS_ERROR,\n  USERLIST_ERROR,\n  USERLIST_LOADED,\n  USERLIST_LOADING,\n  USER_LOADED\n} from \"../../types\";\n\n\n// get user details\nexport const fetchUser = userid => (dispatch, getState) => {\n  dispatch({ type: USERDETAILS_LOADING });\n  api\n    .get(\"/api/v1/users/\" + userid.toString() + \"/\", tokenConfig(getState))\n    .then(res => {\n      dispatch({\n        type: USERDETAILS_LOADED,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      let err_msg = \"\";\n      if (\"detail\" in err.response.data) {\n        err_msg = err.response.data.detail;\n      } else {\n        for (var key in err.response.data) {\n          err_msg += err.response.data[key];\n        }\n      }\n      dispatch({\n        type: USERDETAILS_ERROR,\n        payload: err_msg\n      });\n    });\n};\n\n// fetchallusers\nexport const getUsers = (pagenumber = \"\") => (dispatch, getState) => {\n  let pageUrl = pagenumber\n    ? \"/api/v1/users/?page=\" + pagenumber.toString()\n    : \"/api/v1/users/\";\n  dispatch({ type: USERLIST_LOADING });\n  api\n    .get(pageUrl, tokenConfig(getState))\n    .then(res => {\n      dispatch({\n        type: USERLIST_LOADED,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      let err_msg = \"\";\n      if (\"detail\" in err.response.data) {\n        err_msg = err.response.data.detail;\n      } else {\n        for (var key in err.response.data) {\n          err_msg += err.response.data[key];\n        }\n      }\n      dispatch({\n        type: USERLIST_ERROR,\n        payload: err_msg\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}