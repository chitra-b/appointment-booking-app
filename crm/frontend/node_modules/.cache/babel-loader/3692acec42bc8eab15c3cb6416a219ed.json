{"ast":null,"code":"var _jsxFileName = \"/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/userpreference.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reset } from \"../actions/common\";\nimport { loadTimezones } from \"../actions/common\";\nimport { getUserPreference } from \"../actions/accounts/userpreference/loadpreference\";\nimport { updateUserPreference } from \"../actions/accounts/userpreference/updatepreference\";\nimport DjangoCSRFToken from \"django-react-csrftoken\";\nimport { TimePicker, Checkbox, Tabs, Divider, Radio, Alert, Form, Icon, Input, Button, Spin, Row, Col, Select } from \"antd\";\nimport moment from \"moment\";\nconst Option = Select.Option;\n\nclass UserPreferenceClass extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        values.available_from = values.available_from.format('HH:mm');\n        values.available_till = values.available_till.format('HH:mm');\n\n        if (!err) {\n          this.props.updateUserPreference(this.props.myProfile.user.id, values);\n        }\n      });\n    };\n\n    this.state = {};\n  }\n\n  async componentWillMount() {\n    await this.props.getUserPreference(this.props.myProfile.user.id);\n    await this.props.loadTimezones();\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    let timeZoneOptions = this.props.common.timeZone ? this.props.common.timeZone.map(value => React.createElement(Option, {\n      key: value,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, value)) : null;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.props.loadUserPref.isError ? React.createElement(Alert, {\n      closable: true,\n      message: \"Unable to load preference\",\n      type: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }) : null, this.props.updateUserPref.isError ? React.createElement(Alert, {\n      message: \"Update Failed\",\n      description: this.props.updateUserPref.isError,\n      type: \"error\",\n      closable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : null, this.props.loadUserPref.isLoading ? React.createElement(Spin, {\n      tip: \"Loading...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : React.createElement(Form, {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      orientation: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Schedule\"), React.createElement(Form.Item, {\n      label: \"Time Zone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, getFieldDecorator(\"timezone_field\", {\n      initialValue: this.props.loadUserPref.user_preference ? this.props.loadUserPref.user_preference.timezone_field : null,\n      rules: [{\n        required: true,\n        message: \"Please enter preferred timezone!\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"select preferred timezone\",\n      showSearch: true,\n      loading: this.props.common.isTimeZoneLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, timeZoneOptions))), React.createElement(Form.Item, {\n      label: \"Available days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, getFieldDecorator(\"available_days\", {\n      initialValue: this.props.loadUserPref.user_preference ? this.props.loadUserPref.user_preference.available_days : [],\n      rules: [{\n        required: true,\n        message: \"Please select available days!\"\n      }]\n    })(React.createElement(Checkbox.Group, {\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"MON\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"TUE\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"WED\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"THU\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"FRI\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"SAT\")), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"SUN\")))))), React.createElement(Form.Item, {\n      label: \"Available From\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, getFieldDecorator(\"available_from\", {\n      initialValue: this.props.loadUserPref.user_preference ? moment(this.props.loadUserPref.user_preference.available_from, \"h:mm\") : null,\n      rules: [{\n        required: true,\n        message: \"Please select available from!\"\n      }]\n    })(React.createElement(TimePicker, {\n      use12Hours: true,\n      minuteStep: 15,\n      format: \"h:mm A\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Available To\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, getFieldDecorator(\"available_till\", {\n      initialValue: this.props.loadUserPref.user_preference ? moment(this.props.loadUserPref.user_preference.available_till, \"h:mm\") : null,\n      rules: [{\n        required: true,\n        message: \"Please select available till!\"\n      }]\n    })(React.createElement(TimePicker, {\n      use12Hours: true,\n      minuteStep: 15,\n      format: \"h:mm A\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      orientation: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Notification\"), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      name: \"is_mail_preferred\",\n      defaultChecked: this.props.loadUserPref.user_preference ? this.props.loadUserPref.user_preference.is_mail_preferred : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"E-Mail\"), React.createElement(Checkbox, {\n      name: \"is_sms_preferred\",\n      defaultChecked: this.props.loadUserPref.user_preference ? this.props.loadUserPref.user_preference.is_sms_preferred : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"SMS\")), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.props.updateUserPrefisLoading ? React.createElement(Button, {\n      type: \"primary\",\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Save\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  myProfile: state.myProfile,\n  common: state.common,\n  loadUserPref: state.loadUserPref,\n  updateUserPref: state.updateUserPref\n});\n\nconst UserPreferenceForm = Form.create({\n  name: \"UserPreference\"\n})(UserPreferenceClass);\nexport default connect(mapStateToProps, {\n  reset,\n  loadTimezones,\n  getUserPreference,\n  updateUserPreference\n})(UserPreferenceForm);","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/userpreference.js"],"names":["React","Component","Fragment","connect","reset","loadTimezones","getUserPreference","updateUserPreference","DjangoCSRFToken","TimePicker","Checkbox","Tabs","Divider","Radio","Alert","Form","Icon","Input","Button","Spin","Row","Col","Select","moment","Option","UserPreferenceClass","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","available_from","format","available_till","myProfile","user","id","state","componentWillMount","render","getFieldDecorator","timeZoneOptions","common","timeZone","map","value","loadUserPref","isError","updateUserPref","isLoading","initialValue","user_preference","timezone_field","rules","required","message","isTimeZoneLoading","available_days","width","is_mail_preferred","is_sms_preferred","updateUserPrefisLoading","mapStateToProps","auth","UserPreferenceForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reset } from \"../actions/common\";\nimport { loadTimezones } from \"../actions/common\";\nimport { getUserPreference } from \"../actions/accounts/userpreference/loadpreference\";\nimport { updateUserPreference } from \"../actions/accounts/userpreference/updatepreference\";\nimport DjangoCSRFToken from \"django-react-csrftoken\";\n\nimport {\n  TimePicker,\n  Checkbox,\n  Tabs,\n  Divider,\n  Radio,\n  Alert,\n  Form,\n  Icon,\n  Input,\n  Button,\n  Spin,\n  Row,\n  Col,\n  Select\n} from \"antd\";\nimport moment from \"moment\";\n\nconst { Option } = Select;\n\nclass UserPreferenceClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  async componentWillMount() {\n    await this.props.getUserPreference(this.props.myProfile.user.id);\n    await this.props.loadTimezones();\n  }\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      values.available_from = values.available_from.format('HH:mm');\n      values.available_till = values.available_till.format('HH:mm');\n      if (!err) {\n        this.props.updateUserPreference(this.props.myProfile.user.id,values);\n      }\n    });\n  };\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    let timeZoneOptions = this.props.common.timeZone\n      ? this.props.common.timeZone.map(value => (\n          <Option key={value} value={value}>\n            {value}\n          </Option>\n        ))\n      : null;\n    return (\n      <Fragment>\n        {/* user preference load error */}\n        {this.props.loadUserPref.isError ? (\n          <Alert closable message=\"Unable to load preference\" type=\"warning\" />\n        ) : null}\n        {/* user preference update error */}\n        {this.props.updateUserPref.isError ? (\n          <Alert\n            message=\"Update Failed\"\n            description={this.props.updateUserPref.isError}\n            type=\"error\"\n            closable\n          />\n        ) : null}\n        {this.props.loadUserPref.isLoading ? (\n          <Spin tip=\"Loading...\" />\n        ) : (\n          <Form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <Divider orientation=\"left\">Schedule</Divider>\n            <Form.Item label=\"Time Zone\">\n              {getFieldDecorator(\"timezone_field\", {\n                initialValue: this.props.loadUserPref.user_preference\n                  ? this.props.loadUserPref.user_preference.timezone_field\n                  : null,\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please enter preferred timezone!\"\n                  }\n                ]\n              })(\n                <Select\n                  placeholder=\"select preferred timezone\"\n                  showSearch={true}\n                  loading={this.props.common.isTimeZoneLoading}\n                >\n                  {timeZoneOptions}\n                </Select>\n              )}\n            </Form.Item>\n            <Form.Item label=\"Available days\">\n              {getFieldDecorator(\"available_days\", {\n                initialValue: this.props.loadUserPref.user_preference\n                  ? this.props.loadUserPref.user_preference.available_days\n                  : [],\n                rules: [\n                  { required: true, message: \"Please select available days!\" }\n                ]\n              })(\n                <Checkbox.Group style={{ width: \"100%\" }}>\n                  <Row>\n                    <Col span={8}>\n                      <Checkbox value=\"0\">MON</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"1\">TUE</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"2\">WED</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"3\">THU</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"4\">FRI</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"5\">SAT</Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox value=\"6\">SUN</Checkbox>\n                    </Col>\n                  </Row>\n                </Checkbox.Group>\n              )}\n            </Form.Item>\n            <Form.Item label=\"Available From\">\n              {getFieldDecorator(\"available_from\", {\n                initialValue: this.props.loadUserPref.user_preference\n                  ? moment(\n                      this.props.loadUserPref.user_preference.available_from,\n                      \"h:mm\"\n                    )\n                  : null,\n                rules: [\n                  { required: true, message: \"Please select available from!\" }\n                ]\n              })(<TimePicker use12Hours minuteStep={15} format=\"h:mm A\" />)}\n            </Form.Item>\n            <Form.Item label=\"Available To\">\n              {getFieldDecorator(\"available_till\", {\n                initialValue: this.props.loadUserPref.user_preference\n                  ? moment(\n                      this.props.loadUserPref.user_preference.available_till,\n                      \"h:mm\"\n                    )\n                  : null,\n                rules: [\n                  { required: true, message: \"Please select available till!\" }\n                ]\n              })(<TimePicker use12Hours minuteStep={15} format=\"h:mm A\" />)}\n            </Form.Item>\n            <Divider orientation=\"left\">Notification</Divider>\n            <Form.Item>\n              <Checkbox\n                name=\"is_mail_preferred\"\n                defaultChecked={\n                  this.props.loadUserPref.user_preference\n                    ? this.props.loadUserPref.user_preference.is_mail_preferred\n                    : false\n                }\n              >\n                E-Mail\n              </Checkbox>\n              <Checkbox\n                name=\"is_sms_preferred\"\n                defaultChecked={\n                  this.props.loadUserPref.user_preference\n                    ? this.props.loadUserPref.user_preference.is_sms_preferred\n                    : false\n                }\n              >\n                SMS\n              </Checkbox>\n            </Form.Item>\n\n            <Form.Item>\n              {this.props.updateUserPrefisLoading ? (\n                <Button type=\"primary\" loading>\n                  Loading\n                </Button>\n              ) : (\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Save\n                </Button>\n              )}\n            </Form.Item>\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  myProfile: state.myProfile,\n  common: state.common,\n  loadUserPref: state.loadUserPref,\n  updateUserPref: state.updateUserPref\n});\n\nconst UserPreferenceForm = Form.create({ name: \"UserPreference\" })(\n  UserPreferenceClass\n);\n\nexport default connect(\n  mapStateToProps,\n  { reset, loadTimezones, getUserPreference, updateUserPreference }\n)(UserPreferenceForm);\n"]},"metadata":{},"sourceType":"module"}