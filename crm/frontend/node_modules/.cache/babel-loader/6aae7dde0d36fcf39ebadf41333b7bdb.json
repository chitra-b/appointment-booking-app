{"ast":null,"code":"import api from \"../../../apiurl\";\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGIN_VALIDATING, REGISTER_SUCCESS, REGISTER_FAIL } from \"../../types\"; // LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  dispatch({\n    type: LOGIN_VALIDATING\n  });\n  api.post(\"/api/v1/login/\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    //message.error(err.response.data.detail,10);\n    //dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.data.detail\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  api.post(\"/api/v1/logout/\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Bearer \".concat(token);\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/actions/accounts/usermanagement/auth.js"],"names":["api","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGIN_VALIDATING","REGISTER_SUCCESS","REGISTER_FAIL","login","username","password","dispatch","config","headers","body","JSON","stringify","type","post","then","res","payload","data","catch","err","response","detail","logout","getState","tokenConfig","token","auth"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,SACEC,UADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,aAPF,QAQO,aARP,C,CAUA;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwBC,QAAQ,IAAI;AACvD;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFuD,CAQvD;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAf,CAAb;AACAC,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AAEAL,EAAAA,GAAG,CACAkB,IADH,CACQ,gBADR,EAC0BJ,IAD1B,EACgCF,MADhC,EAEGO,IAFH,CAEQC,GAAG,IAAI;AACXT,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,aADC;AAEPmB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZ;AACA;AACAb,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEd,UADC;AAEPkB,MAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH,IAAb,CAAkBI;AAFpB,KAAD,CAAR;AAID,GAfH;AAgBD,CA5BM,C,CA8BP;;AACA,OAAO,MAAMC,MAAM,GAAG,MAAM,CAAChB,QAAD,EAAWiB,QAAX,KAAwB;AAClD5B,EAAAA,GAAG,CACAkB,IADH,CACQ,iBADR,EAC2B,IAD3B,EACiCW,WAAW,CAACD,QAAD,CAD5C,EAEGT,IAFH,CAEQC,GAAG,IAAI;AACXT,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD,GANH,EAOGmB,KAPH,CAOSC,GAAG,IAAI;AACZb,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD,GAXH;AAYD,CAbM,C,CAeP;;AACA,OAAO,MAAM4B,WAAW,GAAGD,QAAQ,IAAI;AACrC;AACA,QAAME,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AACA,QAAMlB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALqC,CAWrC;;AACA,MAAIiB,KAAJ,EAAW;AACTlB,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,qBAA4CiB,KAA5C;AACD;;AAED,SAAOlB,MAAP;AACD,CAjBM","sourcesContent":["import api from \"../../../apiurl\";\nimport {\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  LOGIN_VALIDATING,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"../../types\";\n\n// LOGIN USER\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n  dispatch({ type: LOGIN_VALIDATING });\n\n  api\n    .post(\"/api/v1/login/\", body, config)\n    .then(res => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      //message.error(err.response.data.detail,10);\n      //dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.detail\n      });\n    });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  api\n    .post(\"/api/v1/logout/\", null, tokenConfig(getState))\n    .then(res => {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}