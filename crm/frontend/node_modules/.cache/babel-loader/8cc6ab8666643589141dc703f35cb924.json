{"ast":null,"code":"var _jsxFileName = \"/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/appointment/reschedulewidget.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reset } from \"../../actions/common\";\nimport { getAppointmentDetails } from \"../../actions/appointment/getappointmentdetails\";\nimport { updateappointment } from \"../../actions/appointment/updateappointment\";\nimport { Redirect } from \"react-router-dom\";\nimport { RESET_UPDATE_APPOINTMENT_STATE, DATE_FORMAT, DATE_TIME_FORMAT, TIME_FORMAT_AM_PM } from \"../../actions/types\";\nimport { Empty, Spin, message } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport BookingWidget from './bookingwidget';\nimport moment from \"moment\";\n\nclass Reschedule extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.rescheduleAppointment = () => {\n      let slotInfo = this.props.userSlots;\n\n      if (slotInfo.selectedDate && slotInfo.selectedTime) {\n        let start_time = moment(slotInfo.selectedDate + \" \" + moment(slotInfo.selectedTime, [\"h:mm A\"]).format(\"HH:mm\")).format(DATE_TIME_FORMAT);\n        let end_time = moment(start_time).add(slotInfo.slot_duration, \"minutes\");\n        end_time = end_time.format(DATE_TIME_FORMAT);\n        let user = slotInfo.user;\n        let timezone_field = slotInfo.timezone;\n        let data = {\n          start_time,\n          end_time,\n          user,\n          timezone_field\n        };\n        this.props.updateappointment(this.props.appointmentDetails.appointment.id, data);\n      } else {\n        message.error(\"Please select date and time\");\n      }\n    };\n\n    this.props.reset(RESET_UPDATE_APPOINTMENT_STATE);\n    this.props.getAppointmentDetails(this.props.match.params.id);\n  }\n\n  render() {\n    let apptDetails = this.props.appointmentDetails;\n\n    if (this.props.updateAppointment.isupdated) {\n      return React.createElement(Redirect, {\n        to: \"/appointment/info/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n\n    return apptDetails.isError ? React.createElement(Empty, {\n      description: apptDetails.isError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, apptDetails.isLoading ? React.createElement(Spin, {\n      tip: \"Loading...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }) : !apptDetails.appointment ? React.createElement(Empty, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(BookingWidget, {\n      reschedule: true,\n      handleReschedule: this.rescheduleAppointment,\n      apptDate: moment(apptDetails.appointment.start_time).format(DATE_FORMAT),\n      apptTime: moment(apptDetails.appointment.start_time).format(TIME_FORMAT_AM_PM),\n      apptUser: apptDetails.appointment.user,\n      apptduration: apptDetails.appointment.slot_duration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetails: state.appointmentDetails,\n  updateAppointment: state.updateAppointment,\n  userSlots: state.getUserSlots,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getAppointmentDetails,\n  updateappointment,\n  reset\n})(Reschedule);","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/appointment/reschedulewidget.js"],"names":["React","Fragment","connect","reset","getAppointmentDetails","updateappointment","Redirect","RESET_UPDATE_APPOINTMENT_STATE","DATE_FORMAT","DATE_TIME_FORMAT","TIME_FORMAT_AM_PM","Empty","Spin","message","BookingWidget","moment","Reschedule","Component","constructor","props","rescheduleAppointment","slotInfo","userSlots","selectedDate","selectedTime","start_time","format","end_time","add","slot_duration","user","timezone_field","timezone","data","appointmentDetails","appointment","id","error","match","params","render","apptDetails","updateAppointment","isupdated","isError","isLoading","mapStateToProps","state","getUserSlots","auth"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reset } from \"../../actions/common\";\nimport { getAppointmentDetails } from \"../../actions/appointment/getappointmentdetails\";\nimport { updateappointment } from \"../../actions/appointment/updateappointment\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  RESET_UPDATE_APPOINTMENT_STATE,\n  DATE_FORMAT,\n  DATE_TIME_FORMAT,\n  TIME_FORMAT_AM_PM\n} from \"../../actions/types\";\nimport {\n  Empty,\n  Spin,\n  message\n} from \"antd\";\nimport \"antd/dist/antd.css\";\nimport BookingWidget from './bookingwidget';\nimport moment from \"moment\";\nclass Reschedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.reset(RESET_UPDATE_APPOINTMENT_STATE);\n    this.props.getAppointmentDetails(this.props.match.params.id);\n  }\n  rescheduleAppointment = () => {\n    let slotInfo = this.props.userSlots;\n    if (slotInfo.selectedDate && slotInfo.selectedTime) {\n      let start_time = moment(\n        slotInfo.selectedDate +\n        \" \" +\n        moment(slotInfo.selectedTime, [\"h:mm A\"]).format(\"HH:mm\")\n      ).format(DATE_TIME_FORMAT);\n      let end_time = moment(start_time).add(\n        slotInfo.slot_duration,\n        \"minutes\"\n      );\n      end_time = end_time.format(\n        DATE_TIME_FORMAT\n      );\n      let user = slotInfo.user;\n      let timezone_field = slotInfo.timezone;\n      let data = {  start_time, end_time, user, timezone_field };\n      this.props.updateappointment(this.props.appointmentDetails.appointment.id, data);\n    }\n    else {\n      message.error(\"Please select date and time\");\n    }\n\n  }\n  render() {\n    let apptDetails = this.props.appointmentDetails;\n    if (this.props.updateAppointment.isupdated) {\n      return <Redirect to=\"/appointment/info/\" />;\n    }\n    return (\n      apptDetails.isError ?\n        <Empty description={apptDetails.isError} /> :\n        <Fragment>\n          {apptDetails.isLoading ? <Spin tip=\"Loading...\" /> :\n            (!apptDetails.appointment) ?\n              <Empty /> :\n              <Fragment>\n                <BookingWidget reschedule={true} handleReschedule={this.rescheduleAppointment} apptDate={moment(apptDetails.appointment.start_time).format(DATE_FORMAT)} apptTime={moment(apptDetails.appointment.start_time).format(TIME_FORMAT_AM_PM)} apptUser={apptDetails.appointment.user} apptduration={apptDetails.appointment.slot_duration} />\n\n              </Fragment>\n          }\n        </Fragment>\n    );\n\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetails: state.appointmentDetails,\n  updateAppointment: state.updateAppointment,\n  userSlots: state.getUserSlots,\n  auth: state.auth\n});\nexport default connect(mapStateToProps, { getAppointmentDetails, updateappointment, reset })(Reschedule)"]},"metadata":{},"sourceType":"module"}