{"ast":null,"code":"var _jsxFileName = \"/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/appointment/reschedulewidget.js\";\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport jstimezonedetect from \"jstimezonedetect\";\nimport { Redirect } from \"react-router-dom\";\nimport { reset } from \"../../actions/common\";\nimport { getUserAvailableSlots, setSelectedDate, setTimeZone, setUser, setSlotDuration, setSelectedTime } from \"../../actions/appointment/getuserslot\";\nimport { getAppointmentDetails } from \"../../actions/appointment/getappointmentdetails\";\nimport { updateappointment } from \"../../actions/appointment/updateappointment\";\nimport { RESET_UPDATE_APPOINTMENT_STATE, DATE_FORMAT, TIME_FORMAT_AM_PM } from \"../../actions/types\";\nimport { Button, Input, Form, Empty, Spin, PageHeader, message } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport BookingWidget from './bookingwidget';\nimport moment from \"moment\";\n\nclass Reschedule extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = () => {\n      if (this.props.userSlots.selectedDate && this.props.userSlots.selectedTime) {} else {\n        message.error(\"Please select date and time\");\n      }\n    };\n\n    this.props.reset(RESET_UPDATE_APPOINTMENT_STATE);\n    this.props.getAppointmentDetails(this.props.match.params.id);\n  }\n\n  render() {\n    const apptDetails = this.props.appointmentDetails;\n    return apptDetails.isError ? React.createElement(Empty, {\n      description: apptDetails.isError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, apptDetails.isLoading ? React.createElement(Spin, {\n      tip: \"Loading...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }) : !apptDetails.appointment ? React.createElement(Empty, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      className: \"align-right page-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Update\")), React.createElement(BookingWidget, {\n      reschedule: true,\n      apptDate: moment(apptDetails.appointment.start_time).format(DATE_FORMAT),\n      apptTime: moment(apptDetails.appointment.start_time).format(TIME_FORMAT_AM_PM),\n      apptUser: apptDetails.appointment.user,\n      apptduration: apptDetails.appointment.slot_duration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetails: state.appointmentDetails,\n  updateAppointment: state.updateAppointment,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getAppointmentDetails,\n  updateappointment,\n  reset\n})(Reschedule);","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/components/appointment/reschedulewidget.js"],"names":["React","Fragment","connect","jstimezonedetect","Redirect","reset","getUserAvailableSlots","setSelectedDate","setTimeZone","setUser","setSlotDuration","setSelectedTime","getAppointmentDetails","updateappointment","RESET_UPDATE_APPOINTMENT_STATE","DATE_FORMAT","TIME_FORMAT_AM_PM","Button","Input","Form","Empty","Spin","PageHeader","message","BookingWidget","moment","Reschedule","Component","constructor","props","handleSubmit","userSlots","selectedDate","selectedTime","error","match","params","id","render","apptDetails","appointmentDetails","isError","isLoading","appointment","start_time","format","user","slot_duration","mapStateToProps","state","updateAppointment","auth"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport jstimezonedetect from \"jstimezonedetect\";\nimport { Redirect } from \"react-router-dom\";\nimport { reset } from \"../../actions/common\";\nimport {\n  getUserAvailableSlots,\n  setSelectedDate,\n  setTimeZone,\n  setUser,\n  setSlotDuration,\n  setSelectedTime\n} from \"../../actions/appointment/getuserslot\";\nimport { getAppointmentDetails } from \"../../actions/appointment/getappointmentdetails\";\nimport { updateappointment } from \"../../actions/appointment/updateappointment\";\nimport {\n  RESET_UPDATE_APPOINTMENT_STATE,\n  DATE_FORMAT,\n  TIME_FORMAT_AM_PM\n} from \"../../actions/types\";\nimport {\n  Button,\n  Input,\n  Form,\n  Empty,\n  Spin,\n  PageHeader,\n  message\n} from \"antd\";\nimport \"antd/dist/antd.css\";\nimport BookingWidget from './bookingwidget';\nimport moment from \"moment\";\nclass Reschedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.reset(RESET_UPDATE_APPOINTMENT_STATE);\n    this.props.getAppointmentDetails(this.props.match.params.id);\n  }\n  handleSubmit = () => {\n    if (this.props.userSlots.selectedDate && this.props.userSlots.selectedTime) {\n\n    }\n    else {\n      message.error(\"Please select date and time\");\n    }\n\n  }\n  render() {\n    const apptDetails = this.props.appointmentDetails;\n    return (\n      apptDetails.isError ?\n        <Empty description={apptDetails.isError} /> :\n        <Fragment>\n          {apptDetails.isLoading ? <Spin tip=\"Loading...\" /> :\n            (!apptDetails.appointment) ?\n              <Empty /> :\n              <Fragment>\n                <PageHeader className=\"align-right page-header\">\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Update\n              </Button>\n                </PageHeader>\n                \n                <BookingWidget reschedule={true} apptDate={moment(apptDetails.appointment.start_time).format(DATE_FORMAT)} apptTime={moment(apptDetails.appointment.start_time).format(TIME_FORMAT_AM_PM)} apptUser={apptDetails.appointment.user} apptduration={apptDetails.appointment.slot_duration} />\n                \n              </Fragment>\n          }\n        </Fragment>\n    );\n\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetails: state.appointmentDetails,\n  updateAppointment: state.updateAppointment,\n  auth: state.auth\n});\nexport default connect(mapStateToProps, { getAppointmentDetails, updateappointment, reset })(Reschedule)"]},"metadata":{},"sourceType":"module"}