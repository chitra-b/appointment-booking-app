{"ast":null,"code":"import api from \"../../apiurl\";\nimport { tokenConfig } from \"../accounts/usermanagement/auth\";\nimport { APPOINTMENTS_FETCH_ERROR, APPOINTMENTS_LOADED, APPOINTMENTS_LOADING, DATE_FORMAT, YEAR_MONTH_FORMAT } from \"../types\";\nimport moment from \"moment\";\nimport axios from 'axios';\nvar CancelToken = axios.CancelToken;\nlet cancel;\nlet apiUrl;\nexport const getUserAppointments = (start_time = '', end_time = '', team_appointments = false, userDetails = []) => (dispatch, getState) => {\n  dispatch({\n    type: APPOINTMENTS_LOADING\n  });\n  cancel && cancel();\n\n  if (userDetails && userDetails.role === 'Admin' && team_appointments === true) {\n    apiUrl = \"/appointments/\" + \"?start_time_after=\" + start_time + \"&end_time_before=\" + end_time;\n  } else {\n    apiUrl = \"/appointments/?user=\" + userDetails.username + \"&start_time_after=\" + start_time + \"&end_time_before=\" + end_time;\n  }\n\n  api.get(apiUrl, tokenConfig(getState), {\n    cancelToken: new CancelToken(function executor(c) {\n      // An executor function receives a cancel function as a parameter\n      cancel = c;\n    })\n  }).then(res => {\n    dispatch({\n      type: APPOINTMENTS_LOADED,\n      payload: res.data.results\n    });\n  }).catch(err => {\n    let err_msg = \"\";\n\n    if (axios.isCancel(err)) {\n      console.log(\"Previous Request Cancelled\");\n    }\n\n    console.log(err.response.data);\n\n    if (\"detail\" in err.response.data) {\n      err_msg = err.response.data.detail;\n    } else {\n      err_msg = err.toString();\n    }\n\n    dispatch({\n      type: APPOINTMENTS_FETCH_ERROR,\n      payload: err.toString()\n    });\n  });\n};","map":{"version":3,"sources":["/Users/chitrabalasubramani/dev/crm/crm/frontend/src/actions/appointment/getuserappointments.js"],"names":["api","tokenConfig","APPOINTMENTS_FETCH_ERROR","APPOINTMENTS_LOADED","APPOINTMENTS_LOADING","DATE_FORMAT","YEAR_MONTH_FORMAT","moment","axios","CancelToken","cancel","apiUrl","getUserAppointments","start_time","end_time","team_appointments","userDetails","dispatch","getState","type","role","username","get","cancelToken","executor","c","then","res","payload","data","results","catch","err","err_msg","isCancel","console","log","response","detail","toString"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SACEC,wBADF,EAEEC,mBAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,iBALF,QAMO,UANP;AAOA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AACA,IAAIC,MAAJ;AACA,IAAIC,MAAJ;AAGA,OAAO,MAAMC,mBAAmB,GAAI,CAACC,UAAU,GAAC,EAAZ,EAAgBC,QAAQ,GAAC,EAAzB,EAA6BC,iBAAiB,GAAC,KAA/C,EAAsDC,WAAW,GAAC,EAAlE,KAAyE,CAC3GC,QAD2G,EAE3GC,QAF2G,KAGxG;AACHD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAAR;AACAM,EAAAA,MAAM,IAAIA,MAAM,EAAhB;;AACA,MAAIM,WAAW,IAAIA,WAAW,CAACI,IAAZ,KAAqB,OAApC,IAA+CL,iBAAiB,KAAK,IAAzE,EACA;AACEJ,IAAAA,MAAM,GAAG,mBACT,oBADS,GACYE,UADZ,GACuB,mBADvB,GAC2CC,QADpD;AAED,GAJD,MAKK;AACHH,IAAAA,MAAM,GAAG,yBAAyBK,WAAW,CAACK,QAArC,GACT,oBADS,GACYR,UADZ,GACuB,mBADvB,GAC2CC,QADpD;AAED;;AACAd,EAAAA,GAAG,CACDsB,GADF,CACMX,MADN,EAEGV,WAAW,CAACiB,QAAD,CAFd,EAGG;AAAEK,IAAAA,WAAW,EAAE,IAAId,WAAJ,CAAgB,SAASe,QAAT,CAAkBC,CAAlB,EAAqB;AAClD;AACAf,MAAAA,MAAM,GAAGe,CAAT;AACD,KAHc;AAAf,GAHH,EASEC,IATF,CASOC,GAAG,IAAI;AACXV,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEhB,mBADC;AAEPyB,MAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC;AAFX,KAAD,CAAR;AAID,GAdF,EAeEC,KAfF,CAeQC,GAAG,IAAI;AACZ,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAIzB,KAAK,CAAC0B,QAAN,CAAeF,GAAf,CAAJ,EAAwB;AACtBG,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,QAAJ,CAAaR,IAAzB;;AACA,QAAI,YAAYG,GAAG,CAACK,QAAJ,CAAaR,IAA7B,EAAmC;AACjCI,MAAAA,OAAO,GAAGD,GAAG,CAACK,QAAJ,CAAaR,IAAb,CAAkBS,MAA5B;AACD,KAFD,MAEO;AACHL,MAAAA,OAAO,GAAGD,GAAG,CAACO,QAAJ,EAAV;AACH;;AACDtB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEjB,wBADC;AAEP0B,MAAAA,OAAO,EAAEI,GAAG,CAACO,QAAJ;AAFF,KAAD,CAAR;AAID,GA9BF;AA+BF,CA9CM","sourcesContent":["import api from \"../../apiurl\";\nimport { tokenConfig } from \"../accounts/usermanagement/auth\";\nimport {\n  APPOINTMENTS_FETCH_ERROR,\n  APPOINTMENTS_LOADED,\n  APPOINTMENTS_LOADING,\n  DATE_FORMAT,\n  YEAR_MONTH_FORMAT\n} from \"../types\";\nimport moment from \"moment\";\nimport axios from 'axios';\nvar CancelToken = axios.CancelToken;\nlet cancel;\nlet apiUrl;\n\n\nexport const getUserAppointments =  (start_time='', end_time='', team_appointments=false, userDetails=[]) => (\n  dispatch,\n  getState\n) => {\n  dispatch({ type: APPOINTMENTS_LOADING });\n  cancel && cancel();\n  if (userDetails && userDetails.role === 'Admin' && team_appointments === true)\n  {\n    apiUrl = \"/appointments/\"+\n    \"?start_time_after=\"+start_time+\"&end_time_before=\"+end_time;\n  }\n  else {\n    apiUrl = \"/appointments/?user=\" + userDetails.username +\n    \"&start_time_after=\"+start_time+\"&end_time_before=\"+end_time;\n  }\n   api\n    .get(apiUrl,\n      tokenConfig(getState),\n      { cancelToken: new CancelToken(function executor(c) {\n        // An executor function receives a cancel function as a parameter\n        cancel = c;\n      })\n    }\n    )\n    .then(res => {\n      dispatch({\n        type: APPOINTMENTS_LOADED,\n        payload: res.data.results\n      });\n    })\n    .catch(err => {\n      let err_msg = \"\";\n      if (axios.isCancel(err)){\n        console.log(\"Previous Request Cancelled\")\n      }\n      console.log(err.response.data);\n      if (\"detail\" in err.response.data) {\n        err_msg = err.response.data.detail;\n      } else {\n          err_msg = err.toString()\n      }\n      dispatch({\n        type: APPOINTMENTS_FETCH_ERROR,\n        payload: err.toString()\n      });\n    });\n};"]},"metadata":{},"sourceType":"module"}