{"ast":null,"code":"var cookie = require('cookie');\n\nif (typeof Object.assign != 'function') {\n  Object.assign = function (target) {\n    'use strict';\n\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n}\n\nvar _rawCookie = {};\nvar _res = undefined;\n\nfunction _isResWritable() {\n  if (!_res) return false;\n  if (_res.headersSent === true) return false;\n  return true;\n}\n\nfunction load(name, doNotParse) {\n  var cookies = typeof document === 'undefined' ? _rawCookie : cookie.parse(document.cookie);\n  var cookieVal = cookies && cookies[name];\n\n  if (typeof doNotParse === 'undefined') {\n    doNotParse = !cookieVal || cookieVal[0] !== '{' && cookieVal[0] !== '[';\n  }\n\n  if (!doNotParse) {\n    try {\n      cookieVal = JSON.parse(cookieVal);\n    } catch (e) {// Not serialized object\n    }\n  }\n\n  return cookieVal;\n}\n\nfunction select(regex) {\n  var cookies = typeof document === 'undefined' ? _rawCookie : cookie.parse(document.cookie);\n  if (!cookies) return {};\n  if (!regex) return cookies;\n  return Object.keys(cookies).reduce(function (accumulator, name) {\n    if (!regex.test(name)) return accumulator;\n    var newCookie = {};\n    newCookie[name] = cookies[name];\n    return Object.assign({}, accumulator, newCookie);\n  }, {});\n}\n\nfunction save(name, val, opt) {\n  _rawCookie[name] = val; // allow you to work with cookies as objects.\n\n  if (typeof val === 'object') {\n    _rawCookie[name] = JSON.stringify(val);\n  } // Cookies only work in the browser\n\n\n  if (typeof document !== 'undefined') {\n    document.cookie = cookie.serialize(name, _rawCookie[name], opt);\n  }\n\n  if (_isResWritable() && _res.cookie) {\n    _res.cookie(name, val, opt);\n  }\n}\n\nfunction remove(name, opt) {\n  delete _rawCookie[name];\n\n  if (typeof opt === 'undefined') {\n    opt = {};\n  } else if (typeof opt === 'string') {\n    // Will be deprecated in future versions\n    opt = {\n      path: opt\n    };\n  } else {\n    // Prevent mutation of opt below\n    opt = Object.assign({}, opt);\n  }\n\n  if (typeof document !== 'undefined') {\n    opt.expires = new Date(1970, 1, 1, 0, 0, 1);\n    opt.maxAge = 0;\n    document.cookie = cookie.serialize(name, '', opt);\n  }\n\n  if (_isResWritable() && _res.clearCookie) {\n    _res.clearCookie(name, opt);\n  }\n}\n\nfunction setRawCookie(rawCookie) {\n  if (rawCookie) {\n    _rawCookie = cookie.parse(rawCookie);\n  } else {\n    _rawCookie = {};\n  }\n}\n\nfunction plugToRequest(req, res) {\n  if (req.cookie) {\n    _rawCookie = req.cookie;\n  } else if (req.cookies) {\n    _rawCookie = req.cookies;\n  } else if (req.headers && req.headers.cookie) {\n    setRawCookie(req.headers.cookie);\n  } else {\n    _rawCookie = {};\n  }\n\n  _res = res;\n  return function unplug() {\n    _res = null;\n    _rawCookie = {};\n  };\n}\n\nvar reactCookie = {\n  load: load,\n  select: select,\n  save: save,\n  remove: remove,\n  setRawCookie: setRawCookie,\n  plugToRequest: plugToRequest\n};\n\nif (typeof window !== 'undefined') {\n  window['reactCookie'] = reactCookie;\n}\n\nmodule.exports = reactCookie;","map":null,"metadata":{},"sourceType":"script"}